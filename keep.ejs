<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://unpkg.com/filepond@^4/dist/filepond.css" rel="stylesheet">
    <link href="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css"
        rel="stylesheet" />
    <script defer src="https://unpkg.com/filepond-plugin-image-preview/dist/filepond-plugin-image-preview.js"></script>
    <script defer src="https://unpkg.com/filepond-plugin-file-encode/dist/filepond-plugin-file-encode.js"></script>
    <script defer src="https://unpkg.com/filepond-plugin-image-resize/dist/filepond-plugin-image-resize.js"></script>
    <script defer src="https://unpkg.com/filepond@^4/dist/filepond.js"></script>
    <script defer src="javascripts/fileUpload.js"></script>
    <title>Mybrary</title>
</head>

<body>
    <%- include('../partials/header.ejs') %>
        <%- include('../partials/errorMessage.ejs') %>
            <%- body %>
</body>

</html>

const express = require('express');
const router = express.Router();
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const Book = require('../models/book')
const Author = require('../models/author');
const uploadPath = path.join('public', Book.coverImageBasePath);
const imageMimeTypes = ['image/jpeg', 'image/png', 'image/gif']
const upload = multer({
dest: uploadPath,
fileFilter: (req, file, callback) => {
callback(null, imageMimeTypes.includes(file.mimetype))
}
})

//All Books Route
router.get('/', async (req, res) => {
let query = Book.find()
if (req.query.title != null && req.query.title != '') {
query = query.regex('title', new RegExp(req.query.title, 'i'))
}
if (req.query.publishedBefore != null && req.query.publishedBefore != '') {
query = query.lte('publishedDate', req.query.publishedBefore)
}
if (req.query.publishedAfter != null && req.query.publishedAfter != '') {
query = query.gte('publishedDate', req.query.publishedAfter)
}
try {
const books = await query.exec();
res.render('books/index', {
books: books,
searchOptions: req.query
})
} catch {
res.redirect('/')
}

})

//New Book Route
router.get('/new', async (req, res) => {
renderNewPage(res, new Book())
})

//Create Book Route
router.post('/', upload.single('cover'), async (req, res) => {
const fileName = req.file != null ? req.file.filename : null
const book = new Book({
title: req.body.title,
author: req.body.author,
publishDate: new Date(req.body.publishDate),
pageCount: req.body.pageCount,
coverImageName: fileName,
description: req.body.description
})
try {
const newBook = await book.save()
// res.redirect(`books/${newBook.id}`)
res.redirect(`books`)
} catch {
if (book.coverImageName != null) {
removeBookCover(book.coverImageName)
}
renderNewPage(res, book, true)
}
});

function removeBookCover(fileName) {
fs.unlink(path.join(uploadPath, fileName), err => {
if (err) console.error(err)
})
}

async function renderNewPage(res, book, hasError = false) {
try {
const authors = await Author.find({})
const params = {
authors: authors,
book: book
}
if (hasError) params.errorMessage = 'Error Creating Book'
res.render('books/new', params)
} catch {
res.redirect('/books')
}
}

module.exports = router;